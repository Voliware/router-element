class RouteElement extends HTMLElement{constructor(){super(),this.routes=new Map,this.current_url="",new MutationObserver(t=>{t.forEach(t=>{switch(t.type){case"childList":const e=[...t.addedNodes,...t.removedNodes];if(e.length)for(let t=0;t<e.length;t++){const s=e[t].tagName;if(s&&"route-element"===s.toLowerCase()){this.findRoutes();break}}if(t.removedNodes.length)for(let e=0;e<t.removedNodes.length;e++)if(this.current_url===t.removedNodes[e].getAttribute("url")){this.current_url="",this.dispatchEvent(new Event("removed",{bubbles:!0}));break}break;case"attributes":const s=new CustomEvent("urlchanged",{detail:t.oldValue,bubbles:!0});this.dispatchEvent(s)}})}).observe(this,{attributes:!0,attributeOldValue:!0,attributeFilter:["url"],childList:!0})}connectedCallback(){this.classList.toggle("hidden",!0),this.findRoutes()}findRoutes(){this.routes.clear();for(let t=0;t<this.children.length;t++){const e=this.children[t];e instanceof RouteElement&&(this.routes.set(e.getAttribute("url"),e),e.addEventListener("urlchanged",({detail:t})=>{this.current_url===t&&(this.current_url="")}))}}route(t){for(const[e,s]of this.routes)t.includes(e)&&(this.setRoute(e),s.route(t))}setRoute(t){const e=this.routes.get(t);if(e){if(""!==this.current_url){this.routes.get(this.current_url).classList.toggle("hidden",!0)}this.current_url=t,e.classList.toggle("hidden",!1)}}}customElements.define("route-element",RouteElement);class RouterElement extends RouteElement{constructor(){super(),this.history_allowed="file:"!==window.location.protocol}connectedCallback(){this.findRoutes(),"false"!==this.getAttribute("back")&&window.addEventListener("popstate",()=>{this.route(window.location.pathname,!1)}),"false"!==this.getAttribute("auto")&&this.init()}init(){this.route(window.location.pathname,!1)}route(t,e=!0){e&&this.history_allowed&&"false"!==this.getAttribute("history")&&window.history.pushState(null,null,t),super.route(t)}}customElements.define("router-element",RouterElement);