class RouteElement extends HTMLElement{constructor(){super(),this.is_initialized=!1,new MutationObserver(t=>{t.forEach(t=>{switch(t.type){case"attributes":if("url"===t.attributeName){const e=new CustomEvent("urlchanged",{detail:t.oldValue,bubbles:!0});this.dispatchEvent(e)}else"nav"===t.attributeName&&this.findNavs()}})}).observe(this,{attributes:!0,attributeOldValue:!0,attributeFilter:["url","nav"]})}init(){this.is_initialized||(this.is_initialized=!0,this.initialize())}initialize(){}toggle(t){const e=this.getAttribute("display")||"block";this.style.display=t?e:"none"}}customElements.define("route-element",RouteElement);class RouterElement extends HTMLElement{constructor(){super(),this.history_allowed="file:"!==window.location.protocol,this.routes=new Map,this.navs=new Map,this.current_url=null,new MutationObserver(t=>{t.forEach(t=>{switch(t.type){case"childList":t.removedNodes.length&&this.handleRemovedChildNode(t.removedNodes)}})}).observe(this,{childList:!0}),this.addEventListener("route",t=>{this.route(t.detail)})}connectedCallback(){"false"!==this.getAttribute("back")&&window.addEventListener("popstate",()=>{this.route(window.location.pathname,!1)}),this.findRoutes(),this.findNavs(),"false"!==this.getAttribute("auto")&&this.initialize()}initialize(){this.route(window.location.pathname,!1)}handleRemovedChildNode(t){for(let e=0;e<t.length;e++)if(this.current_url===t[e].getAttribute("url")){this.current_url=null,this.dispatchEvent(new Event("removed",{bubbles:!0}));break}}findNavs(){this.navs.clear();const t=this.getAttribute("nav");if(!t)return;const e=document.querySelectorAll(t);e.length&&e.forEach(t=>{t.querySelectorAll(".route-element-nav").forEach(t=>{const e=t.getAttribute("href"),i=t.getAttribute("url"),s=e||i;if(!s)return void console.warn("route-element-nav is missing an href/url attribute");t.addEventListener("click",t=>{t.preventDefault(),this.route(s)});const n=this.navs.get(s)||[];n.push(t),this.navs.set(s,n)})})}setNav(t){const e=this.navs.get(this.current_url);e&&e.length&&e.forEach(t=>{t.classList.remove("route-element-nav-active")});const i=this.navs.get(t);i&&i.length&&i.forEach(t=>{t.classList.toggle("route-element-nav-active",!0)})}findRoutes(){this.routes.clear();for(let t=0;t<this.children.length;t++){const e=this.children[t];e instanceof RouteElement&&(this.routes.set(e.getAttribute("url"),e),e.addEventListener("urlchanged",({detail:t})=>{this.current_url===t&&(this.current_url=null)}))}}route(t){"string"==typeof t?(this.history_allowed&&"false"!==this.getAttribute("history")&&window.history.pushState(null,null,t),this.setNav(t),this.setRoute(t),this.current_url=t):console.warn("Invalid URL passed to route()")}setRoute(t){const e=this.routes.get(t);if(e){if(null!==this.current_url){const t=this.routes.get(this.current_url);t&&t.toggle(!1)}e.toggle(!0),e.init()}}}customElements.define("router-element",RouterElement);